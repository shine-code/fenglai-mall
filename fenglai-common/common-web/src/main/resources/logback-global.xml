<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration  scan="true" scanPeriod="10 seconds">

    <springProperty scope="context" name="applicationName" source="spring.application.name" />
    <springProperty scope="context" name="graylogHost" source="logging.graylog.host" />
    <springProperty scope="context" name="graylogPort" source="logging.graylog.port" />

    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <include resource="org/springframework/boot/logging/logback/defaults.xml" />

    <!-- 日志输出文件位置 -->
<!--    <property name="LOG_HOME" value="/logs/${APP_NAME}" />-->

    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最低级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 输出到 Graylog -->
<!--    <appender name="GELF" class="de.siegmar.logbackgelf.GelfUdpAppender">-->
<!--        &lt;!&ndash; Graylog服务的地址 &ndash;&gt;-->
<!--        <graylogHost>${graylogHost}</graylogHost>-->
<!--        &lt;!&ndash; UDP Input端口 &ndash;&gt;-->
<!--        <graylogPort>${graylogPort}</graylogPort>-->
<!--        &lt;!&ndash; 最大GELF数据块大小（单位：字节），508为建议最小值，最大值为65467 &ndash;&gt;-->
<!--        <maxChunkSize>508</maxChunkSize>-->
<!--        &lt;!&ndash; 是否使用压缩 &ndash;&gt;-->
<!--        <useCompression>true</useCompression>-->
<!--        <encoder class="de.siegmar.logbackgelf.GelfEncoder">-->
<!--            &lt;!&ndash; 是否发送原生的日志信息 &ndash;&gt;-->
<!--            <includeRawMessage>false</includeRawMessage>-->
<!--            <includeMarker>true</includeMarker>-->
<!--            <includeMdcData>true</includeMdcData>-->
<!--            <includeCallerData>false</includeCallerData>-->
<!--            <includeRootCauseData>false</includeRootCauseData>-->
<!--            &lt;!&ndash; 是否发送日志级别的名称，否则默认以数字代表日志级别 &ndash;&gt;-->
<!--            <includeLevelName>true</includeLevelName>-->
<!--            <shortPatternLayout class="ch.qos.logback.classic.PatternLayout">-->
<!--                <pattern>%m%nopex</pattern>-->
<!--            </shortPatternLayout>-->
<!--            <fullPatternLayout class="ch.qos.logback.classic.PatternLayout">-->
<!--                <pattern>%d - [%thread] %-5level %logger{35} - %msg%n</pattern>-->
<!--            </fullPatternLayout>-->

<!--            &lt;!&ndash; 配置应用名称（服务名称），通过staticField标签可以自定义一些固定的日志字段 &ndash;&gt;-->
<!--            <staticField>app_name:${applicationName}</staticField>-->
<!--        </encoder>-->
<!--    </appender>-->

    <!-- 输出到文件  -->
<!--    <appender name="timeFileOutput" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;日志名,指定最新的文件名，其他文件名使用FileNamePattern &ndash;&gt;-->
<!--        <File>${LOG_HOME}/timeFile/out.log</File>-->
<!--        &lt;!&ndash;文件滚动模式&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;日志文件输出的文件名,可设置文件类型为gz,开启文件压缩&ndash;&gt;-->
<!--            <FileNamePattern>${LOG_HOME}/timeFile/info.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>-->
<!--            &lt;!&ndash;日志文件保留天数&ndash;&gt;-->
<!--            <MaxHistory>30</MaxHistory>-->
<!--            &lt;!&ndash;按大小分割同一天的&ndash;&gt;-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>10MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--        </rollingPolicy>-->

<!--        &lt;!&ndash;输出格式&ndash;&gt;-->
<!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->
<!--            &lt;!&ndash;设置编码&ndash;&gt;-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->

<!--    </appender>-->

    <!-- 开发环境输出至控制台 -->
    <springProfile name="dev">
        <root level="DEBUG">
            <appender-ref ref="CONSOLE" />
<!--            <appender-ref ref="GELF" />-->
        </root>

        <!-- 输出日志细粒度控制, 去掉一些debug日志 -->
        <logger name="org.springframework" level="INFO" addtivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="io.netty" level="INFO" addtivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="io.lettuce" level="INFO" addtivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="com.alibaba.nacos.client" level="INFO" addtivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="c.x.j.c.thread.ExecutorRegistryThread" level="INFO" addtivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
    </springProfile>

    <!-- 生产环境输出至文件 -->
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="GELF" />
            <appender-ref ref="timeFileOutput" />
        </root>
    </springProfile>

</configuration>
